--HW 2---

--Section 2---
--2.1a
SELECT * FROM Employee;
--2.1b
SELECT * FROM Employee WHERE LASTNAME = 'King';
--2.1c
SELECT * FROM Employee WHERE FIRSTNAME = 'Andrew' AND REPORTSTO = 'NULL';
--2.2a
SELECT * FROM Album ORDER BY TITLE DESC;
--2.2b
SELECT FIRTNAME FROM Customer ORDER BY CITY; 
--2.3a
SELECT * FROM GENRE;
INSERT INTO GENRE VALUES (26,'Pschodelic Rock');
INSERT INTO GENRE VALUES (27,'Dancehall');
--2.3b
SELECT * FROM EMPLOYEE;
INSERT INTO EMPLOYEE VALUES (9,'Hendrix','Jimmy','Legal',1,TO_DATE('13-MAR-72', 'DD-MON-YY'),TO_DATE('26-NOV-98', 'DD-MON-YY'),'1234 Easy Dr','Orlando','FL','USA','T6H 8D9','+1 (780) 678-9012', '+1 (780) 456-7890','jimmyh@gmail.com');
INSERT INTO EMPLOYEE VALUES (10,'Wilkson','John','Test Engineer',6,TO_DATE('10-APR-67','DD-MON-YY'),TO_DATE('25-NOV-98','DD-MON-YY'),'1234 Hard Street','Atlanta','GA','USA','T9D 8J5','+1 (678) 123-5678', '+1 (678) 123-7890','WilksonJ@gmail.com');
--2.3c
SELECT * FROM CUSTOMER;
INSERT INTO CUSTOMER VALUES (60,'Jimmy' , 'Dean','Walmart','678 Bald Dr','Mexico City',null,'Mexico','34509','+6 (789) 567-7890','+6 (567) 345-6789','jimmyD@yahoo.com',4);
INSERT INTO CUSTOMER VALUES (61,'Susan','Hung','Fridays','456 Cleaner Dr','Atlanta','GA','USA','30125','+76 (678) 567-7890','+76 (765) 345-6789','susanH@yahoo.com',3);
--2.4a
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE CUSTOMERID = 32;
--2.4b
SELECT*FROM ARTIST;
UPDATE ARTIST SET NAME = 'CCR' WHERE ARTISTID = 76;
--2.5a
SELECT * FROM INVOICE;
SELECT BILLINGADDRESS FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';
--2.6a
SELECT TOTAL FROM INVOICE WHERE TOTAL BETWEEN 15 and 50;
--2.6b
SELECT*FROM EMPLOYEE;
SELECT LASTNAME,FIRSTNAME FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('01-JUN-03','DD-MM-YY') and TO_DATE('01-MAR-04','DD-MM-YY');
--2.7
SELECT*FROM CUSTOMER;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
SELECT * FROM INVOICE;
ALTER TABLE Invoice DROP CONSTRAINT FK_InvoiceCustomerId;
ALTER TABLE Invoice ADD CONSTRAINT FK_InvoiceCustomerId FOREIGN KEY (CustomerId) REFERENCES Customer (CustomerId) ON DELETE CASCADE;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
ALTER TABLE InvoiceLine DROP CONSTRAINT FK_InvoiceLineInvoiceId;
ALTER TABLE InvoiceLine ADD CONSTRAINT FK_InvoiceLineInvoiceId FOREIGN KEY (InvoiceId) REFERENCES Invoice (InvoiceId) ON DELETE CASCADE;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
ROLLBACK;

--3.1a
CREATE OR REPLACE FUNCTION tell_Time
RETURN TIMESTAMP
IS
    my_time TIMESTAMP;
BEGIN
    SELECT CURRENT_TIMESTAMP INTO my_time FROM dual;
        RETURN my_time;
END;

DECLARE 
my_time TIMESTAMP;
BEGIN
    my_time:= tell_Time();
    DBMS_OUTPUT.PUT_LINE('The time is:'|| my_time);
END;

--3.1b
SELECT * FROM MEDIATYPE;
CREATE OR REPLACE FUNCTION media_Length_Func
RETURN NUMBER
IS
    media_length NUMBER;
BEGIN
    SELECT LENGTH (NAME)INTO media_length FROM MEDIATYPE 
    WHERE ROWNUM = 1;
    RETURN media_length;
END;

DECLARE 
    media_length NUMBER;
BEGIN
    media_length := media_Length_Func();
    DBMS_OUTPUT.PUT_LINE('Length Of Mediatype is:' ||media_length);
END;
  
--3.2a
SELECT * FROM INVOICE;
CREATE OR REPLACE FUNCTION average_Func
RETURN NUMBER
IS
    average NUMBER;
BEGIN
    SELECT AVG(Total)INTO average FROM INVOICE;
    RETURN average;
END;

DECLARE
    average NUMBER;
BEGIN
    average := average_Func();
    DBMS_OUTPUT.PUT_LINE('The average is:'|| average);
END;

--3.2b
SELECT * FROM TRACK;

CREATE OR REPLACE FUNCTION expensive_Tracks
RETURN VARCHAR2
IS
    most_exp VARCHAR2(50);
    
BEGIN
    SELECT TRACK.NAME INTO most_exp FROM TRACK ORDER BY TRACK.UNITPRICE FETCH FIRST ROW ONLY ;
    RETURN most_exp;
END;

DECLARE 
    most_exp VARCHAR2(50);
BEGIN
    most_exp := expensive_Tracks();
    DBMS_OUTPUT.PUT_LINE('The most expensive track is: '|| most_exp);
END;

--3.3
SELECT*FROM INVOICELINE;
CREATE OR REPLACE FUNCTION avg_invoice_func
RETURN NUMBER
IS
    average NUMBER;
BEGIN
    SELECT AVG(UNITPRICE)INTO average FROM TRACK;
    RETURN average;
END;

DECLARE
    average NUMBER;
BEGIN
    average:=avg_invoice_func();
    DBMS_OUTPUT.PUT_LINE('The avergae Unit Price is: '|| average);
END;







--3.4
SELECT * FROM EMPLOYEE;
CREATE OR REPLACE FUNCTION young_Employees
RETURN SYS_REFCURSOR
IS
    young_ones SYS_REFCURSOR;
BEGIN
    OPEN young_ones FOR

    SELECT employee.FIRSTNAME , employee.LASTNAME FROM employee WHERE (BIRTHDATE > TO_DATE('31-DEC-68','DD-MON-YY'));
    RETURN young_ones;
END;

SELECT young_Employees FROM dual;
ROLLBACK;    
    
--4.1
CREATE OR REPLACE PROCEDURE names_Procedure
IS
   Names SYS_REFCURSOR;
BEGIN
   OPEN Names FOR 
   SELECT EMPLOYEE.FIRSTNAME,EMPLOYEE.LASTNAME FROM EMPLOYEE;
   DBMS_SQL.RETURN_RESULT(Names);
END;

BEGIN
   names_Procedure();
END;
ROLLBACK;

--4.2a
SELECT*FROM EMPLOYEE;
CREATE OR REPLACE PROCEDURE info_Update (FN VARCHAR2, ADDR IN VARCHAR2, CY IN VARCHAR2, ST IN VARCHAR2, CNTY IN VARCHAR2, PC IN VARCHAR2, PN IN VARCHAR2, 
                                        FX IN VARCHAR2, EML IN VARCHAR2)
IS
BEGIN
   UPDATE employee SET ADDRESS = ADDR, CITY = CY, STATE = ST,COUNTRY = CNTY, POSTALCODE = PC, PHONE = PN, FAX = FX, EMAIL = EML
   WHERE FIRSTNAME = FN;
END;

BEGIN
   info_Update('Steve','123 Easy St','Atlanta','GA', 'USA','30294','+5 (678) 321-7654','+6 (678) 432-8765','SteveJohnson@gmail.com');
END;
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Steve';
ROLLBACK;

--4.2b
SELECT * FROM EMPLOYEE;
CREATE OR REPLACE PROCEDURE manager_List
IS
    list_Man SYS_REFCURSOR;
BEGIN
    OPEN list_Man FOR
    SELECT firstname,lastname,title FROM employee WHERE TITLE LIKE '%Manager';
    DBMS_SQL.RETURN_RESULT(list_Man);
END;

BEGIN
    manager_List();
END;


--4.3
SELECT * FROM CUSTOMER;
CREATE OR REPLACE PROCEDURE info_Return (FN IN OUT VARCHAR2,LN IN OUT VARCHAR2, COMP OUT VARCHAR2)
IS
BEGIN
    --OPEN ref_Table FOR
    SELECT FIRSTNAME,LASTNAME,COMPANY INTO FN,LN,COMP FROM CUSTOMER WHERE FIRSTNAME = FN AND LASTNAME = LN;
END;

DECLARE
    FN VARCHAR2(20);
    LN VARCHAR2(20);
    COMP VARCHAR2;
    
BEGIN
    info_Return('Astrid','Gruber',COMP);
    DBMS_OUTPUT.PUT_LINE('The customer is: ' || FN || ' ' || LN || ' and he works at: ' || COMP);
END;

ROLLBACK;

--5.0a
SELECT * FROM INVOICELINE;
CREATE OR REPLACE PROCEDURE delete_Invoice(inv_ID IN NUMBER)
IS
BEGIN
   DELETE FROM INVOICELINE WHERE INVOICEID = inv_ID;
   DELETE FROM INVOICE WHERE INVOICEID = inv_ID;
END;

BEGIN
   delete_Invoice(11);
   DBMS_OUTPUT.PUT_LINE('INVOICE DELETED');
END;
SELECT * FROM INVOICE;
ROLLBACK;

--5.0b
SELECT * FROM Customer;
CREATE OR REPLACE PROCEDURE insert_Customer
IS
BEGIN
   INSERT INTO CUSTOMER VALUES (62,'Bibble','Guy','Walmart','5432 Tinfoil Dr','Buffalo', 'NY', 'USA', '34521', '+67 (911) 699 - 9220', '+67 (833) 659 - 9280', 'BibbleG@gmail.com', 2);
END;

BEGIN
   insert_Customer();
   DBMS_OUTPUT.PUT_LINE();
   DBMS_OUTPUT.PUT_LINE('Customer inserted');
END;
SELECT * FROM CUSTOMER;
ROLLBACK;
--6.1a
SELECT*FROM EMPLOYEE;
CREATE OR REPLACE TRIGGER new_Employee_Trigger
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
   DBMS_OUTPUT.PUT_LINE('New record in employee table');
END;

INSERT INTO EMPLOYEE VALUES (11,'Black','Panther','Mechanical Engineer',2,TO_DATE('22-DEC-92','DD-MON-YY'),TO_DATE('14-FEB-06','DD-MON-YY'),'543 Wakanda Rd','Atlanta','GA','USA',
   '34582','+9 (678) 845 - 3921','+9 (395) 421 - 4503','KillMonger@wakanda.com');
SELECT * FROM EMPLOYEE;
ROLLBACK;

--6.1b
SELECT*FROM ALBUM;
CREATE OR REPLACE TRIGGER new_Album_Trigger
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
   DBMS_OUTPUT.PUT_LINE('NEW ROW CREATED');
END;

UPDATE ALBUM SET TITLE = 'SUPERORGANISM' WHERE TITLE = 'Balls to the Wall';
SELECT*FROM ALBUM;
ROLLBACK;
--6.1c
SELECT * FROM CUSTOMER;
CREATE OR REPLACE TRIGGER delete_Customer_Trigger
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
   DBMS_OUTPUT.PUT_LINE('ROW DELETED');
END;

DELETE FROM INVOICE WHERE CUSTOMER = 26;
DELETE FROM CUSTOMER WHERE CUSTOMERID = 26;

SELECT * FROM CUSTOMER;
ROLLBACK;
--7.1
SELECT * FROM INVOICE;
SELECT * FROM INVOICELINE;
SELECT * FROM CUSTOMER;
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.CUSTOMERID ,INVOICE.INVOICEID
FROM CUSTOMER
INNER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
ROLLBACK;
--7.2
SELECT INVOICE.INVOICEID,INVOICE.CUSTOMERID,CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME,INVOICE.TOTAL
FROM INVOICE
FULL OUTER JOIN CUSTOMER
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
ROLLBACK;
--7.3
SELECT ARTIST.ARTISTID,ARTIST.NAME,ALBUM.TITLE,ALBUM.ALBUMID
FROM ALBUM
RIGHT JOIN ARTIST
ON ARTIST.ARTISTID = ALBUM.ARTISTID;
ROLLBACK;
--7.4
SELECT ARTIST.NAME,ALBUM.TITLE
FROM ALBUM
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME,ALBUM.TITLE;
ROLLBACK;
--7.5
SELECT * FROM EMPLOYEE;
SELECT A.EMPLOYEEID,A.FIRSTNAME,A.LASTNAME,B.EMPLOYEEID,B.FIRSTNAME,B.LASTNAME,A.REPORTSTO,B.REPORTSTO
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO = B.REPORTSTO
ORDER BY A.REPORTSTO;
ROLLBACK;
